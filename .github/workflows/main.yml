name: TimeManager CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  ELIXIR_VERSION: '1.14.x'
  OTP_VERSION: '25.x'
  NODE_VERSION: '20'

jobs:
  backend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    
    - name: Cache Elixir deps
      uses: actions/cache@v3
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-

    - name: Install dependencies
      run: |
        cd time_manager
        mix deps.get


  frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Cache npm packages
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-

    - name: Install frontend dependencies
      run: |
        cd client
        npm install
    
    - name: Build frontend
      run: |
        cd client
        npm run build
    
    - name: Run frontend tests
      run: |
        cd client
        npm run test:unit

  docker:
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./time_manager
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/timemanager-backend:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/timemanager-backend:latest

    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./client
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/timemanager-frontend:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/timemanager-frontend:latest

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    #- name: Configure kubectl
    #  uses: azure/k8s-set-context@v1
    #  with:
    #    kubeconfig: ${{ secrets.KUBE_CONFIG }}
    
    - name: Update Kubernetes resources
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKER_IMAGE_TAG: ${{ github.sha }}
      run: |
        sed -i 's|image: .*backend:.*|image: '"${DOCKER_USERNAME}"'/timemanager-backend:'"${DOCKER_IMAGE_TAG}"'|' k8s/deployment.yaml
        sed -i 's|image: .*frontend:.*|image: '"${DOCKER_USERNAME}"'/timemanager-frontend:'"${DOCKER_IMAGE_TAG}"'|' k8s/deployment.yaml
    
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
      env:
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/elixir-backend
        kubectl rollout status deployment/vuejs-frontend